
#---Carregando os pacotes necessários----

library(dplyr) # manipulação e variáveis
library(naniar) # trabalhar com missing data (NA - not annotated)
library(report) # gerar tabelas descritivas (media, mediana, número de casos...)
library(stringr) # trabalhar com variaveis texto para procurar espaços extras
library(purrr) # uma função map.
library(forcats) # manipulação de níveis de variáveis.

#---Importanto o banco de dados----

metabric = read.csv("data/metabric.csv")

#---Remoção de duplicatas----

metabric <- metabric %>%
  distinct()

metabric <- metabric %>%
  distinct(Patient.ID, Sample.ID, .keep_all = T)

#---Inspeção inicial os dados----

glimpse(metabric) %>% capture.output(file = 'glimpse.txt')
paste(1:ncol(metabric),':',colnames(metabric)) %>% capture.output(file = 'nomes_colunas')

metabric %>% select_if(is.character) %>% map(table) %>% capture.output(file = 'rótulos variáveis.txt')

fosp_clean <- fosp %>% remove_empty('cols') %>% 
  remove_empty('rows') %>% 
  remove_constant()

compare_df_cols(fosp,fosp_clean)

setdiff(names(fosp), names(fosp_clean))  # colunas que estão em df1, mas não em df2
setdiff(names(fosp_clean), names(fosp))  # colunas que estão em df2, mas não em df1

variaveis <- list(
  "LOCALTNM", "IDMITOTIC", "PSA", "GLEASON", "TRATFANTES", "CIRURANT",
  "RADIOANT", "QUIMIOANT", "HORMOANT", "TMOANT",
  "IMUNOANT", "OUTROANT", "TMOAPOS", "IMUNOAPOS", "ANODIAG", "ERRO"
)

lapply(variaveis, function(x){
  unique(fosp[[x]])
})

#---Tratamento, análise e verificação dos valores ausentes----

miss_var_summary(metabric)
gg_miss_var(metabric)

metabric_complete = metabric %>% filter(complete.cases(.))
sum(is.na(metabric_complete))

metabric %>% filter(!is.na(Mutation.Count))

#---Correção das classes de variáveis---

#---Transformação das variáveis texto em categóricas---

metabric <- metabric %>% mutate(
  across(where(is.character),as.factor)
)
glimpse(metabric)

#---Remoção de variáveis(colunas) que não serão utilizadas----

metabric <-  metabric %>% select(-c(1:4))
glimpse(metabric)

removido_colunas <- metabric %>%
  select(-Tipo.de.cirurgia.da.mama, -Estado.vital.do.paciente)

selecionado_colunas = metabric %>% select(c(4:8),12,14)
glimpse(metabric)


## Procurando mais variáveis para remover com a ferramenta Desc

metabric %>% select_if(is.factor) %>% Desc()

#---Renomear colunas----
metabric <- metabric %>%
  rename(
    Idade = Idade.no.Diagnóstico,
    `Faixa etária` = Grupos.etários
  )

paste(1:ncol(metabric),':',colnames(metabric)) %>% capture.output(file = 'nomes_colunas')

##---Transformação de dados----

###---Tratando variáveis de texto----

metabric = metabric %>% mutate(across(where(is.character), str_trim)) # remoção de espaços extras.
head(metabric)


###---Filtragem----

selecionado = metabric %>% filter(
  Hormonioterapia == 'YES',
  Idade > 30
)
selecionado

metabric %>% filter(
  Radioterapia == 'NO', Quimioterapia == 'NO',`Idade.no.Diagnóstico` > 60
) %>% nrow
table(metabric$Radioterapia); table(metabric$Quimioterapia)

metabric %>% filter(
  Hormonioterapia == 'YES',
  Estado.menopausal.inferido == 'Post',
  Idade.no.Diagnóstico > 50,
  Grau.histológico %in% c(1,2,3)
)



#### ---Filtragem seguido da criação de uma tabela de frequência---
metabric %>% filter(
  Hormonioterapia == 'YES'
) %>% select(ER.Status) %>% map(~prop.table(table(.))*100)

metabric %>% filter(
  Hormonioterapia == 'YES'
) %>% 
  select(ER.status.mensurado.por.IHC) %>% 
  map(~prop.table(table(.))*100)

metabric %>% filter(
  Hormonioterapia == 'YES'
) %>% 
  select(ER.status.mensurado.por.IHC) %>% 
  map(Desc)



###----Criação de novas variáveis ou alteração----

metabric <-  metabric %>% mutate(
  Nottingham.prognostic.index = if_else(
    Nottingham.prognostic.index > 1000,
    Nottingham.prognostic.index / 1000,
    Nottingham.prognostic.index
  )
) 

metabric %>% mutate(NPI_risk = case_when(
  Nottingham.prognostic.index <= 2.4 ~ 'excelente',
  Nottingham.prognostic.index > 2.4 & Nottingham.prognostic.index <3.4 ~ 'bom',
  Nottingham.prognostic.index >= 3.4 & Nottingham.prognostic.index <5.4 ~ 'moderado',
  Nottingham.prognostic.index >=5.4 ~ 'ruim'
)
) %>% glimpse()

###---Trabalhando com os níveis das variáveis categóricas---

#### Identificando e olhando as frequências dos níveis das variáveis categóricas

metabric %>%
  select_if(is.character) %>%
  map(fct_count)

####---Renomeando níveis da variável categórica----

metabric %>% mutate(
  Status.geral.de.sobrevivência = recode(
    Status.geral.de.sobrevivência,
    `0:LIVING` = 'Living',
    `1:DECEASED` = 'Deceased'
  )
) %>% glimpse()

###---Visualizando os dados---

####---Agrupamento e sumarização----

idade_cirurgia <- metabric %>% group_by(Tipo.de.cirurgia.da.mama, HER2.Status) %>% 
  summarise(media = mean(Idade.no.Diagnóstico, na.rm = T),
            `desvio padrão` = sd(Idade.no.Diagnóstico, na.rm = T),
            mediana = median(Idade.no.Diagnóstico, na.rm = T)
            )

library(gt)

gt_idade_cirurgia <-  idade_cirurgia %>% gt() %>% 
  tab_header(
    title = 'Idade no diagnóstico por tipo de cirurgia e status HER2',
  ) %>% 
  fmt_number(
    columns = c(media, `desvio padrão`, mediana)
  ) %>% 
  cols_label(
    Tipo.de.cirurgia.da.mama = 'Tipo de cirurgia',
    HER2.Status = 'Status HER2',
    media = 'Média',
    `desvio padrão`= 'Desvio padrão',
    mediana = 'Mediana'
  ) %>%
  tab_options(
    table.font.size = "small",
    data_row.padding = px(5)
  )

gtsave(gt_idade_cirurgia, 'idade cirurgia.tex')

####---Estatística descritiva---

library(rstatix)
library(pastecs)
library(DescTools)

metabric %>% select_if(is.numeric) %>% Desc() # Fazendo com a função Desc do DescTool.

estat_desc  <-  metabric %>% select_if(is.numeric) %>% select(-n.,-status_num) %>% get_summary_stats() # Fazendo com a função do get_summary_stats do rstatix.

estat_desc  <-  metabric %>% select_if(is.numeric) %>% select(-n.,-status_num) %>% stat.desc(basic = F, norm = T) # Fazendo com a função stat.desc do pastecs. Tem normalidade, assimetria e curtose.

round(estat_desc,2) # função round para arrendondamento.

capture.output(round(estat_desc,3),file = 'resultados/estatistica descritiva.txt')   


####---Visualização gráficos---

library(ggpubr)

ggboxplot(
  metabric, x = 'Quimioterapia', y = 'Idade.no.Diagnóstico'
)

variáveis_x <- c('Quimioterapia', 'Hormonioterapia', 'Radioterapia', 'ER.Status', 'Estágio.do.tumor', 'Grupos.de.estadiamento')

plot <- list()

for (x_var in variáveis_x) {
  p <- ggboxplot(
    metabric,
    x = x_var,
    y = 'Idade.no.Diagnóstico',
    outlier.shape = NA,
    bxp.errorbar = T,
    add = 'jitter'
  )
  plot[[x_var]] <- p
}

library(patchwork)
multipli_plots <- wrap_plots(plot)









